#!/usr/bin/env bpython3

import sys
import os
import time
import json
import shutil
import argparse
import functools
import getpass
from glob import glob
from collections import OrderedDict
from PySide2 import QtCore, QtGui, QtWidgets

class VersionManagerWindow(QtWidgets.QMainWindow):
    """
    Interface used to manager versions under backbone.
    """

    __noChangeColor = 'rgba(100, 100, 100, 150)'
    __releaseTypes = OrderedDict(
        alpha={
            'color': 'rgba(59, 102, 123, 255)',
        },
        beta={
            'color': 'rgba(59, 102, 123, 255)',
        },
        stable={
            'color': 'rgba(59, 102, 123, 255)',
        }
    )

    __backboneRoot = os.environ.get('BACKBONE_ROOT', '')
    __backboneReleaseTypes = os.environ.get('BACKBONE_RELEASE_TYPES', ' '.join(__releaseTypes.keys()))
    __backboneConfigDirectory = os.path.join(__backboneRoot, 'configs', 'bvermanager', 'releases')

    def __init__(self):
        """
        Create a version manager window object.
        """
        super(VersionManagerWindow, self).__init__()

        self.__headerLabel = QtWidgets.QLabel()
        self.__headerLabel.setVisible(False)
        scrollArea = QtWidgets.QScrollArea()
        scrollArea.setFocusPolicy(QtCore.Qt.NoFocus)
        scrollArea.setWidgetResizable(True)
        layout = QtWidgets.QVBoxLayout()

        scrollLayout = QtWidgets.QVBoxLayout()
        scrollContainer = QtWidgets.QWidget()
        scrollContainer.setLayout(scrollLayout)
        scrollArea.setWidget(scrollContainer)

        layout.addWidget(self.__headerLabel)
        layout.addWidget(scrollArea)

        contentLayout = QtWidgets.QGridLayout()
        contentLayout.setSpacing(0)

        self.__versions = {}
        self.__enableCoreCheckBoxes = {}

        coreNames = glob(os.path.join(self.__backboneRoot, 'core', '*'))
        coreConfigNames = glob(os.path.join(self.__backboneRoot, 'core-config', '*', '*'))

        coreVersions = {}
        for corePath in coreNames + coreConfigNames:
            corePath = os.path.normpath(corePath)
            coreVersions[corePath] = []
            for coreVersionPath in glob(os.path.join(corePath, '*')):
                if os.path.basename(coreVersionPath) in self.__releaseTypes.keys() or os.path.isdir(coreVersionPath) or os.path.islink(coreVersionPath) and not os.path.exists(coreVersionPath):
                    coreVersions[corePath].append(coreVersionPath)

        for index, coreVersionPath in enumerate(['ALL'] + sorted(coreVersions.keys())):

            itemName = coreVersionPath[len(self.__backboneRoot) + 1:] if index > 0 else coreVersionPath

            itemFirstLayout = QtWidgets.QVBoxLayout()
            itemFirstLayout.setContentsMargins(0, 0, 0, 0)
            itemFirstLayout.setSpacing(0)
            itemNameCheckBox = QtWidgets.QCheckBox(itemName)
            itemNameCheckBox.setStyleSheet("border-top: 2px solid #222; padding-top: 9px; padding-right: 10px")
            itemNameCheckBox.setCheckState(QtCore.Qt.Checked)

            itemNameCheckBox.stateChanged.connect(functools.partial(self.__onChangedCoreVersionToggle, coreVersionPath))
            self.__enableCoreCheckBoxes[coreVersionPath] = itemNameCheckBox

            itemFirstLayout.addWidget(itemNameCheckBox)

            bumpVersionsButtons = QtWidgets.QPushButton('Bump')
            bumpVersionsButtons.clicked.connect(functools.partial(self.__onBumpVersions, coreVersionPath))
            bumpVersionsButtons.setVisible(False)
            itemFirstLayout.addWidget(bumpVersionsButtons)
            itemFirstLayout.addStretch()
            bumpVersionsButtons.setDisabled(True)

            contentLayout.addLayout(itemFirstLayout, index, 0)
            contentLayout.setColumnStretch(0, 0)

            for releaseTypeIndex, releaseType in enumerate(self.__releaseTypes.keys()):
                if releaseType not in self.__backboneReleaseTypes:
                    continue

                releaseVersionLayout = QtWidgets.QVBoxLayout()
                releaseFrame = QtWidgets.QFrame()
                releaseFrame.setObjectName('releaseFrame')
                releaseFrame.setStyleSheet(
                        "QFrame#releaseFrame {background: <color>; border-radius: 0px; border: 2px solid #222; border-right: none; border-bottom: none}".replace(
                        "<color>",
                        self.__noChangeColor
                    )
                )
                releaseFrame.setLayout(releaseVersionLayout)

                releaseLabel = QtWidgets.QLabel("{} STREAM".format(releaseType.upper()))
                releaseLabel.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
                releaseLabel.setAlignment(QtCore.Qt.AlignCenter)
                releaseFont = QtGui.QFont()
                releaseFont.setPointSize(9)
                releaseFont.setBold(True)
                releaseLabel.setFont(releaseFont)

                releaseVersionLayout.addWidget(
                    releaseLabel
                )

                contentLayout.addWidget(releaseFrame, index, 1 + releaseTypeIndex)
                contentLayout.setColumnStretch(1 + releaseTypeIndex, 1)

                if itemName == 'ALL':
                    bumpVersionsButtons.setDisabled(False)
                    loadButtonLabel = "Load latest versions available"
                    if not self.__backboneReleaseTypes.startswith(releaseType):
                        loadButtonLabel = 'Load versions from {0}'.format(
                            list(self.__releaseTypes.keys())[releaseTypeIndex - 1]
                        )

                    loadButton = QtWidgets.QPushButton(loadButtonLabel)

                    itemFont = QtGui.QFont()
                    itemFont.setBold(False)
                    loadButton.setFont(itemFont)

                    releaseVersionLayout.addWidget(
                        loadButton
                    )

                    loadButton.clicked.connect(functools.partial(self.__loadVersions, releaseType))
                else:
                    releaseVersionCombobox = QtWidgets.QComboBox()
                    if coreVersionPath not in self.__versions:
                        self.__versions[coreVersionPath] = {}
                    self.__versions[coreVersionPath][releaseType] = {
                        'originalVersion': None,
                        'combobox': releaseVersionCombobox,
                        'releaseFrame': releaseFrame
                    }

                    versions = []
                    releaseVersion = None
                    for versionPath in coreVersions[coreVersionPath]:
                        versionName = os.path.basename(versionPath)

                        if releaseType == versionName:
                            if os.path.isdir(versionPath) and os.path.islink(versionPath):
                                releaseVersion = os.readlink(versionPath)
                            elif os.path.isfile(versionPath):
                                with open(versionPath) as f:
                                    releaseVersion = f.read().strip()

                        if versionName in self.__releaseTypes.keys():
                            continue

                        versions.append(
                            [
                                versionName,
                                # creating an auxiliary padded list of versions that we are gonna
                                # use later for sorting
                                '.'.join(
                                    map(
                                        lambda x: x.zfill(10) if x.isdigit() else '{}{}'.format('0'* 10, x),
                                        versionName.split('.')
                                    )
                                )
                            ]
                        )

                    releaseVersionCombobox.addItems(
                        # pyside expects a list type...
                        list(
                            # adding versions by making sure the latest versions are on top
                            map(lambda x: x[0], sorted(versions, key=lambda y: y[1], reverse=True))
                        )
                    )

                    if releaseVersion:
                        releaseLabel.setAlignment(QtCore.Qt.AlignLeft)
                        releaseFont = QtGui.QFont()
                        releaseFont.setPointSize(8)
                        releaseLabel.setFont(releaseFont)
                        releaseLabel.setText("current: {}".format(releaseVersion))
                        if releaseVersion not in map(lambda x: x[0], versions):
                            releaseVersionCombobox.addItem(releaseVersion)
                        releaseVersionCombobox.setCurrentText(releaseVersion)
                    else:
                        releaseLabel.setText("{}: {}".format(releaseType, 'NONE'))
                        releaseVersionCombobox.addItem('NONE')
                        releaseVersionCombobox.setCurrentText('NONE')

                    bumpVersionsButtons.setEnabled(releaseVersionCombobox.currentIndex())

                    self.__versions[coreVersionPath][releaseType]['originalVersion'] = releaseVersion
                    releaseVersionCombobox.currentTextChanged.connect(functools.partial(self.__onVersionChanged, releaseType, coreVersionPath))
                    releaseVersionLayout.addWidget(
                        releaseVersionCombobox
                    )

        scrollLayout.addLayout(contentLayout)
        scrollLayout.addStretch()

        actionAreaLayout = QtWidgets.QHBoxLayout()

        rollbackButton = QtWidgets.QPushButton('Rollback/History')
        itemFont = QtGui.QFont()
        itemFont.setBold(True)
        rollbackButton.setFont(itemFont)

        self.__rollbackMenu = QtWidgets.QMenu()
        action = self.__rollbackMenu.addAction('Print releases directory')
        action.triggered.connect(self.__onPrintReleasesDirectory)

        releases = glob(os.path.join(self.__backboneConfigDirectory, '*.json'))
        releases.sort(reverse=True)

        versionsLimit = 50
        versionsMenu = self.__rollbackMenu.addMenu('Versions (latest {})'.format(versionsLimit))
        for release in releases[:versionsLimit]:
            action = versionsMenu.addAction(os.path.splitext(os.path.basename(release))[0])
            action.triggered.connect(functools.partial(self.__onLoadRelease, release))

        rollbackButton.setMenu(self.__rollbackMenu)
        actionAreaLayout.addWidget(rollbackButton)

        deployButton = QtWidgets.QPushButton('Deploy')
        deployButton.setFont(itemFont)
        deployButton.setIcon(deployButton.style().standardIcon(QtWidgets.QStyle.SP_ArrowForward))
        deployButton.clicked.connect(self.deploy)
        actionAreaLayout.addWidget(deployButton)

        layout.addLayout(actionAreaLayout)
        placeHolder = QtWidgets.QWidget()
        placeHolder.setLayout(layout)
        self.setCentralWidget(placeHolder)
        self.setWindowTitle("Backbone Version Manager")
        self.resize(1024, 768)

    def upgrade(self, specificReleaseType=None):
        """
        Upgrade all versions to the latest version.
        """
        for releaseType in self.releaseTypes():
            if specificReleaseType is None or releaseType.lower() == specificReleaseType.lower():
                self.__loadLatest(releaseType)

    def deploy(self):
        """
        Perform the deployment procedure of the active versions.
        """
        reply = QtWidgets.QMessageBox.question(self, "Backbone", "Are you sure you want to deploy the new versions?", QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
        if reply != QtWidgets.QMessageBox.Yes:
            return

        output = {
            'configVersion': 1,
            'createdUser': os.environ.get('BACKBONE_USER', getpass.getuser()),
            'data': {}
        }

        hasModification = False
        for versionPath in self.__versions.keys():
            versionRelative = versionPath[len(self.__backboneRoot) + 1:].replace('\\', '/')
            output['data'][versionRelative] = {}
            for releaseType, data in self.__versions[versionPath].items():
                currentValue = self.__versions[versionPath][releaseType]['combobox'].currentText()
                originalValue = self.__versions[versionPath][releaseType]['originalVersion']
                output['data'][versionRelative][releaseType] = {
                    'version': currentValue,
                    'previousVersion': originalValue if currentValue != originalValue else None
                }
                if currentValue != originalValue:
                    hasModification = True

        if not hasModification:
            QtWidgets.QMessageBox.critical(self, 'Backbone version manager', 'No modifications found, deployment aborted!')
            return

        # running deployment
        self.__applyDeployment(output)

        QtWidgets.QMessageBox.information(self, 'Backbone version manager', 'Deployment completed!')
        self.close()

    @classmethod
    def releaseTypes(cls):
        """
        Return a list of backbone release stream names.
        """
        return cls.__backboneReleaseTypes.split(' ')

    def __onPrintReleasesDirectory(self):
        """
        Callback called when Print releases directory is triggered.
        """
        sys.stdout.write("{}\n".format(self.__backboneConfigDirectory.replace('\\', '/')))
        sys.stdout.flush()

    def __onLoadRelease(self, release):
        """
        Callback called when rollback/history is triggered.
        """
        configuration = {}
        with open(release) as f:
            configuration = json.load(f)

        self.__headerLabel.setText(
            "Loaded release {} created by {} at {}".format(
                os.path.basename(release),
                configuration['createdUser'],
                time.strftime('%d-%m-%Y %H:%M', time.gmtime(os.path.getmtime(release)))
            )
        )

        for versionPath, releaseTypes in configuration['data'].items():
            for releaseType, versionData in releaseTypes.items():
                versionTypeFullPath = os.path.normpath(os.path.join(self.__backboneRoot, versionPath))
                notFound = True
                for versionPath in self.__versions:
                    if os.path.normpath(versionPath) == versionTypeFullPath:
                        notFound = False
                        break
                if notFound:
                    continue

                if releaseType not in self.__backboneReleaseTypes:
                    continue
                self.__versions[versionTypeFullPath][releaseType]['combobox'].setCurrentText(versionData['version'])
        self.__headerLabel.setVisible(True)

    def __onChangedCoreVersionToggle(self, coreVersionPath, value):
        """
        Callback called when then checkbox that controls the enable/disable state of the versioned is triggered.
        """
        if coreVersionPath == 'ALL':
            for checkbox in self.__enableCoreCheckBoxes.values():
                checkbox.setCheckState(QtCore.Qt.Checked if value == QtCore.Qt.Checked else QtCore.Qt.Unchecked)
            return

        for coreVersionPath, releaseTypes in self.__versions.items():
            for releaseType in releaseTypes.keys():
                combobox = self.__versions[coreVersionPath][releaseType]['combobox']
                originalValue = self.__versions[coreVersionPath][releaseType]['originalVersion']
                combobox.setCurrentText(originalValue)
                combobox.setEnabled(value == QtCore.Qt.Checked)

    def __onVersionChanged(self, releaseType, coreVersionPath, newVersion):
        """
        Callback called when version combobox is triggered.
        """
        self.__headerLabel.setVisible(False)
        data = self.__versions[coreVersionPath][releaseType]

        color = self.__releaseTypes[releaseType]['color']
        if data['originalVersion'] == str(newVersion):
            color = self.__noChangeColor

        data['releaseFrame'].setStyleSheet(
                "QFrame#releaseFrame {background: <color>; border-radius: 0px; border: 2px solid #222; border-right: none; border-bottom: none }".replace(
                "<color>",
                color
            )
        )

    def __onBumpVersions(self, coreVersionPath):
        """
        Callback called when bump version button is triggered.
        """
        self.__headerLabel.setVisible(False)
        if coreVersionPath == 'ALL':
            for versionPath in self.__enableCoreCheckBoxes.keys():
                if versionPath == 'ALL':
                    continue

                self.__onBumpVersions(versionPath)
            return

        if not self.__versions[coreVersionPath]['alpha']['combobox'].isEnabled():
            return

        latestVersion = self.__versions[coreVersionPath]['alpha']['combobox'].itemText(0)
        alphaVersion = self.__versions[coreVersionPath]['alpha']['originalVersion']
        betaVersion = self.__versions[coreVersionPath]['beta']['originalVersion']

        self.__versions[coreVersionPath]['alpha']['combobox'].setCurrentText(latestVersion)
        self.__versions[coreVersionPath]['beta']['combobox'].setCurrentText(alphaVersion)
        self.__versions[coreVersionPath]['stable']['combobox'].setCurrentText(betaVersion)

    def __applyDeployment(self, outputData):
        """
        Run the deployment making the versions active in backbone.
        """
        releases = []
        if os.path.exists(self.__backboneConfigDirectory):
            releases = glob(os.path.join(self.__backboneConfigDirectory, '*.json'))
            releases.sort(reverse=True)
        else:
            os.makedirs(self.__backboneConfigDirectory)

        if not releases:
            releases.append('0.json')

        version = str(int(os.path.splitext(os.path.basename(releases[0]))[0]) + 1).zfill(4)
        outputFile = os.path.join(self.__backboneConfigDirectory, "{}.json".format(version))
        activeFile = os.path.join(os.path.dirname(self.__backboneConfigDirectory), "active.json")
        with open(outputFile, 'w') as f:
            f.write(
                json.dumps(
                    outputData,
                    sort_keys=True,
                    indent=4
                )
            )
        shutil.copyfile(outputFile, activeFile)

        for versionPath, releaseTypes in outputData['data'].items():
            for releaseType, versionData in releaseTypes.items():
                versionTypeFullPath = os.path.join(self.__backboneRoot, versionPath, releaseType)
                version = versionData['version']
                isSymlink = os.path.islink(versionTypeFullPath)

                # no need to update symlink when version is the same
                if isSymlink and os.readlink(versionTypeFullPath) == version and os.path.isdir(versionTypeFullPath):
                    continue
                # also no need to update when version file is the same
                elif os.path.isfile(versionTypeFullPath):
                    with open(versionTypeFullPath) as f:
                        if f.read().strip() == version:
                            continue

                # setting release message
                sys.stdout.write('Setting release {} to version {}\n'.format(
                        versionTypeFullPath.replace('\\', '/'),
                        version
                    )
                )

                # when version does not match we need to remove
                # the current symlink so a new one can be created
                if isSymlink:
                    os.remove(versionTypeFullPath)
                    os.symlink(version, versionTypeFullPath)
                elif os.path.isfile(versionTypeFullPath):
                    with open(versionTypeFullPath, 'w') as f:
                        f.write(version)

    def __loadVersions(self, releaseType):
        """
        Callback called when load release versions button is triggered.
        """
        # latest versions
        if self.__backboneReleaseTypes.startswith(releaseType):
            self.__loadLatest(releaseType)
            return

        source = 'alpha' if releaseType == 'beta' else 'beta'
        for versionPath in self.__versions.keys():
            data = self.__versions[versionPath][releaseType]
            if data['combobox'].isEnabled():
                data['combobox'].setCurrentIndex(self.__versions[versionPath][source]['combobox'].currentIndex())

    def __loadLatest(self, releaseType):
        """
        Load the latest version for the input release type.
        """
        for versionPath in self.__versions.keys():
            data = self.__versions[versionPath][releaseType]
            if data['combobox'].isEnabled():
                data['combobox'].setCurrentIndex(0)


# command help
parser = argparse.ArgumentParser(
    add_help=True,
    description='Manages backbone versions'
)

parser.add_argument(
    '--upgrade',
    default=False,
    action="store_true",
    help='Upgrades all versions under the alpha, beta, stable streams to the latest versions.'
)

for releaseType in VersionManagerWindow.releaseTypes():
    parser.add_argument(
        '--upgrade-{}'.format(releaseType),
        default=False,
        action="store_true",
        help='Upgrades all versions under the {} stream to the latest versions.'.format(releaseType)
    )

parser.add_argument(
    '--deploy',
    default=False,
    action="store_true",
    help='This flag can be used in conjunction with --upgrade flags to execute deploy procedure.'
)

if __name__ == '__main__':
    args, unknownArgs = parser.parse_known_args()
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle(QtWidgets.QStyleFactory.create('Fusion'))

    # dark palette
    palette = QtGui.QPalette()
    palette.setColor(QtGui.QPalette.Window, QtGui.QColor(53, 53, 53))
    palette.setColor(QtGui.QPalette.WindowText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Base, QtGui.QColor(25, 25, 25))
    palette.setColor(QtGui.QPalette.AlternateBase, QtGui.QColor(53, 53, 53))
    palette.setColor(QtGui.QPalette.ToolTipBase, QtCore.Qt.black)
    palette.setColor(QtGui.QPalette.ToolTipText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Text, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Button, QtGui.QColor(53, 53, 53))
    palette.setColor(QtGui.QPalette.ButtonText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.BrightText, QtCore.Qt.red)
    palette.setColor(QtGui.QPalette.Link, QtGui.QColor(42, 130, 218))
    palette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(42, 130, 218))
    palette.setColor(QtGui.QPalette.HighlightedText, QtCore.Qt.black)
    app.setPalette(palette)

    window = VersionManagerWindow()
    window.show()

    # upgrading versions
    if args.upgrade:
        window.upgrade()
    else:
        for releaseType in VersionManagerWindow.releaseTypes():
            value = getattr(args, 'upgrade_{}'.format(releaseType))
            if not value:
                continue
            window.upgrade(releaseType)

    # run deployment
    if args.deploy:
        window.deploy()

    sys.exit(app.exec_())
