#!/usr/bin/env python3

import os
import sys
import json
import pwd
import grp
from glob import glob

def deploy():
    """
    Change the active versions for the releases under backbone.
    """
    uid = pwd.getpwnam(os.environ['BACKBONE_DEPLOY_USER']).pw_uid
    gid = grp.getgrnam(os.environ['BACKBONE_DEPLOY_GROUP']).gr_gid

    configuration = json.loads(sys.stdin.read())
    __backboneRoot = os.environ['BACKBONE_ROOT']
    __backboneConfigDirectory = os.path.join(__backboneRoot, 'configs', 'bvermanager', 'releases')

    releases = []
    if os.path.exists(__backboneConfigDirectory):
        releases = glob(os.path.join(__backboneConfigDirectory, '*.json'))
        releases.sort(reverse=True)
    else:
        os.makedirs(__backboneConfigDirectory)

    if not releases:
        releases.append('0.json')

    version = str(int(os.path.splitext(os.path.basename(releases[0]))[0]) + 1).zfill(4)
    outputFile = os.path.join(__backboneConfigDirectory, "{}.json".format(version))
    with open(outputFile, 'w') as f:
        f.write(
            json.dumps(
                configuration,
                sort_keys=True,
                indent=4
            )
        )

    os.chown(outputFile, uid, gid)
    os.chmod(outputFile, 0o640)

    for versionPath, releaseTypes in configuration['data'].items():
        for releaseType, versionData in releaseTypes.items():
            versionTypeFullPath = os.path.join(__backboneRoot, versionPath, releaseType)
            version = versionData['version']
            isSymlink = os.path.islink(versionTypeFullPath)

            # no need to update symlink when version is the same
            if isSymlink and os.readlink(versionTypeFullPath) == version:
                continue

            # when version does not match we need to remove
            # the current symlink so a new one can be created
            elif isSymlink:
                os.remove(versionTypeFullPath)

            elif not isSymlink and os.path.exists(versionTypeFullPath):
                sys.stderr.write(
                    'Expecting a symlink, failed to update: {}\n'.format(
                        versionTypeFullPath
                    )
                )
                continue

            # creating symlink
            sys.stdout.write('Setting release {} to version {}\n'.format(
                    versionTypeFullPath,
                    version
                )
            )
            os.symlink(version, versionTypeFullPath)
            os.lchown(versionTypeFullPath, uid, gid)

if __name__ == '__main__':
    deploy()

